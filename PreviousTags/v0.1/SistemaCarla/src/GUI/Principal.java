/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import ClasesBase.MensajesValidaciones;
import ClasesBase.Paciente;
import DAO.DAOPaciente;
import java.awt.event.KeyEvent;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Fran
 */
public class Principal extends javax.swing.JFrame {
    
    private ABMPacienteCompleto pacienteInterfaz;
    private HistoriaClinica HC;
    private DefaultTableModel dtmPacientes;
    private DAOPaciente daoPaciente;
    private LinkedList<Paciente> listaPacientes;
    private Paciente p;
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        setearIniciales();
        daoPaciente = new DAOPaciente();
        listaPacientes = daoPaciente.getAllPacientes("", "");
        dtmPacientes = (DefaultTableModel) this.tblPacientes.getModel();
        cambiarTama√±oTabla(dtmPacientes,15);
        llenarTabla(listaPacientes);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            /*
             * Set the Nimbus look and feel
             */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /*
             * If Nimbus (introduced in Java SE 6) is not available, stay with the
             * default look and feel. For details see
             * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
             */
            
                        javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
               
                
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBuscar = new javax.swing.JPanel();
        txtfApellido = new javax.swing.JTextField();
        cmbFiltroBuscar = new javax.swing.JComboBox();
        lblstaticApellido = new javax.swing.JLabel();
        lblstaticDni = new javax.swing.JLabel();
        txtfDni = new javax.swing.JTextField();
        txtfNombre = new javax.swing.JTextField();
        lblstaticNombre = new javax.swing.JLabel();
        btnBuscarDni = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPacientes = new javax.swing.JTable();
        pnlPacientes = new javax.swing.JPanel();
        btnNuevoPaciente = new javax.swing.JButton();
        btnModificarPaciente = new javax.swing.JButton();
        btnVerHC = new javax.swing.JButton();
        btnEliminarPaciente = new javax.swing.JButton();
        lblstaticTablaPac = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(5, 5, 0, 0));
        setPreferredSize(new java.awt.Dimension(655, 515));
        setResizable(false);

        pnlBuscar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Buscar"));

        txtfApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtfApellidoKeyTyped(evt);
            }
        });

        cmbFiltroBuscar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Apellido y Nombre", "DNI" }));
        cmbFiltroBuscar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFiltroBuscarItemStateChanged(evt);
            }
        });

        lblstaticApellido.setText("Apellido:");

        lblstaticDni.setText("DNI:");

        txtfDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtfDniKeyTyped(evt);
            }
        });

        txtfNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtfNombreKeyTyped(evt);
            }
        });

        lblstaticNombre.setText("Nombre:");

        btnBuscarDni.setText("Buscar");
        btnBuscarDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarDniActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBuscarLayout = new javax.swing.GroupLayout(pnlBuscar);
        pnlBuscar.setLayout(pnlBuscarLayout);
        pnlBuscarLayout.setHorizontalGroup(
            pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBuscarLayout.createSequentialGroup()
                        .addGroup(pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblstaticApellido)
                            .addComponent(txtfApellido)
                            .addComponent(txtfDni, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblstaticNombre)
                            .addComponent(txtfNombre)
                            .addComponent(btnBuscarDni, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)))
                    .addGroup(pnlBuscarLayout.createSequentialGroup()
                        .addGroup(pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblstaticDni)
                            .addComponent(cmbFiltroBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 151, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlBuscarLayout.setVerticalGroup(
            pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarLayout.createSequentialGroup()
                .addGroup(pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBuscarLayout.createSequentialGroup()
                        .addComponent(lblstaticApellido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBuscarLayout.createSequentialGroup()
                        .addComponent(lblstaticNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblstaticDni)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarDni))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbFiltroBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        tblPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", ""},
                {"", null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "Fecha de Nacimiento", "Fecha de Ultima Consulta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPacientes);

        pnlPacientes.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Paciente"));

        btnNuevoPaciente.setText("Nuevo Paciente");
        btnNuevoPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoPacienteActionPerformed(evt);
            }
        });

        btnModificarPaciente.setText("Modificar Paciente");
        btnModificarPaciente.setEnabled(false);
        btnModificarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarPacienteActionPerformed(evt);
            }
        });

        btnVerHC.setText("Ver Historia Clinica");
        btnVerHC.setEnabled(false);
        btnVerHC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerHCActionPerformed(evt);
            }
        });

        btnEliminarPaciente.setText("Eliminar Paciente");
        btnEliminarPaciente.setEnabled(false);
        btnEliminarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPacienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPacientesLayout = new javax.swing.GroupLayout(pnlPacientes);
        pnlPacientes.setLayout(pnlPacientesLayout);
        pnlPacientesLayout.setHorizontalGroup(
            pnlPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPacientesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnModificarPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNuevoPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(pnlPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEliminarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVerHC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlPacientesLayout.setVerticalGroup(
            pnlPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPacientesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnVerHC, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(btnNuevoPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnModificarPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminarPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        lblstaticTablaPac.setText("Tabla de Pacientes:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(pnlBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(32, 32, 32)
                            .addComponent(pnlPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblstaticTablaPac))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlPacientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblstaticTablaPac)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoPacienteActionPerformed
        pacienteInterfaz = new ABMPacienteCompleto(this,true,0);
        pacienteInterfaz.setVisible(true);
        borrarFilas(dtmPacientes);
        this.txtfApellido.setText("");
        this.txtfNombre.setText("");
        this.txtfDni.setText("");
        dtmPacientes.setNumRows(15);
    }//GEN-LAST:event_btnNuevoPacienteActionPerformed

    private void btnModificarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarPacienteActionPerformed
      p = new Paciente();
      dtmPacientes = (DefaultTableModel) this.tblPacientes.getModel();
      p = listaPacientes.get(tblPacientes.getSelectedRow());
      p = daoPaciente.getPacienteCompleto(p.getDni());
      
      pacienteInterfaz = new ABMPacienteCompleto(this,true,1,p);
      pacienteInterfaz.setVisible(true);
      borrarFilas(dtmPacientes);
      this.txtfApellido.setText("");
      this.txtfNombre.setText("");
      this.txtfDni.setText("");
      dtmPacientes.setNumRows(15);
    }//GEN-LAST:event_btnModificarPacienteActionPerformed

    private void btnVerHCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerHCActionPerformed
     p = new Paciente();
     p = listaPacientes.get(tblPacientes.getSelectedRow());
     p = daoPaciente.getPaciente(p.getDni());
     
     HC = new HistoriaClinica(p);
     this.setVisible(false);
     HC.setVisible(true);
     this.dispose();
    }//GEN-LAST:event_btnVerHCActionPerformed

    private void btnEliminarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarPacienteActionPerformed
        if(JOptionPane.showConfirmDialog(this, "Esta seguro que desea eliminar el paciente?","Atencion",2) == 0)
        {
            p = new Paciente();
            p = listaPacientes.get(tblPacientes.getSelectedRow());
            if(daoPaciente.borrarPaciente(p.getDni()))
            {
                String apellido = this.txtfApellido.getText();
                listaPacientes = new LinkedList<>();
                String nombre = this.txtfNombre.getText();
                listaPacientes = daoPaciente.getAllPacientes(nombre, apellido);
                if(listaPacientes.isEmpty())
                {
                    this.btnEliminarPaciente.setEnabled(false);
                    this.btnModificarPaciente.setEnabled(false);
                    this.btnVerHC.setEnabled(false);
                }
                else
                {
                    this.btnEliminarPaciente.setEnabled(true);
                    this.btnModificarPaciente.setEnabled(true);
                    this.btnVerHC.setEnabled(true);
                }
                llenarTabla(listaPacientes);
                this.txtfApellido.setText("");
                this.txtfNombre.setText("");
                this.txtfDni.setText("");
                JOptionPane.showMessageDialog(this, "Paciente Borrado","Atencion",1);
            }
            else
                JOptionPane.showMessageDialog(this, "Paciente No Se Ha Borrado","Atencion",1);
        }
    }//GEN-LAST:event_btnEliminarPacienteActionPerformed

    private void txtfApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfApellidoKeyTyped
        if(MensajesValidaciones.negarNumerosBool(evt,this))
            return;
        String apellido = "";
        int i = this.txtfApellido.getText().length();
        if(evt.getKeyChar() == KeyEvent.VK_BACK_SPACE){
            if(i > 1)
                apellido = this.txtfApellido.getText().substring(0, this.txtfApellido.getText().length() - 1);
            else if(i == 1)
                apellido = this.txtfApellido.getText();
            else if(i == 0)
                apellido = "";   
        }
        else
            apellido = this.txtfApellido.getText()+evt.getKeyChar();
        
        listaPacientes = new LinkedList<>();
        String nombre = this.txtfNombre.getText();
        listaPacientes = daoPaciente.getAllPacientes(nombre, apellido);
        if(listaPacientes.isEmpty())
        {
            this.btnEliminarPaciente.setEnabled(false);
            this.btnModificarPaciente.setEnabled(false);
            this.btnVerHC.setEnabled(false);
        }
        else
        {
            this.btnEliminarPaciente.setEnabled(true);
            this.btnModificarPaciente.setEnabled(true);
            this.btnVerHC.setEnabled(true);
        }
        llenarTabla(listaPacientes);
    }//GEN-LAST:event_txtfApellidoKeyTyped

    private void cmbFiltroBuscarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFiltroBuscarItemStateChanged
        String seleccionado = (String)cmbFiltroBuscar.getSelectedItem();
        dtmPacientes = (DefaultTableModel) this.tblPacientes.getModel();
        borrarFilas(dtmPacientes);
        if(seleccionado.compareTo("DNI") == 0)
        {
            this.txtfNombre.setText("");
            this.txtfApellido.setText("");
            
            cambiarTama√±oTabla(dtmPacientes,1);
            
            this.txtfNombre.setEditable(false);
            this.txtfApellido.setEditable(false);
            this.txtfDni.setEditable(true);
            this.btnBuscarDni.setEnabled(true);
        }
        else
        {
            this.txtfDni.setText("");
            
            cambiarTama√±oTabla(dtmPacientes,15);
            this.tblPacientes.setModel(dtmPacientes);
            
            this.txtfNombre.setEditable(true);
            this.txtfApellido.setEditable(true);
            this.txtfDni.setEditable(false);
            this.btnBuscarDni.setEnabled(false);
        }
    }//GEN-LAST:event_cmbFiltroBuscarItemStateChanged

    private void txtfNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfNombreKeyTyped
        if(MensajesValidaciones.negarNumerosBool(evt,this))
            return;
        String nombre = "";
        int i = this.txtfNombre.getText().length(); 
        if(evt.getKeyChar() == KeyEvent.VK_BACK_SPACE){
            if(i > 1 )
                nombre = this.txtfNombre.getText().substring(0, this.txtfNombre.getText().length() - 1);
            else if(i == 1)
                nombre = this.txtfNombre.getText();
            else if(i == 0)
                {
                nombre = "";
                }     
        }
        else
        nombre = this.txtfNombre.getText()+evt.getKeyChar();
        
        String apellido = this.txtfApellido.getText();
        listaPacientes = new LinkedList<>();
        
        listaPacientes = daoPaciente.getAllPacientes(nombre, apellido);
        
        if(listaPacientes.isEmpty())
        {
            this.btnEliminarPaciente.setEnabled(false);
            this.btnModificarPaciente.setEnabled(false);
            this.btnVerHC.setEnabled(false);
        }
        else
        {
            this.btnEliminarPaciente.setEnabled(true);
            this.btnModificarPaciente.setEnabled(true);
            this.btnVerHC.setEnabled(true);
        }
        llenarTabla(listaPacientes);
    }//GEN-LAST:event_txtfNombreKeyTyped

    private void txtfDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfDniKeyTyped
        MensajesValidaciones.negarLetras(evt,this);
    }//GEN-LAST:event_txtfDniKeyTyped

    private void btnBuscarDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarDniActionPerformed
     if(this.txtfDni.getText().isEmpty())
         return;
        p = new Paciente();
        p = daoPaciente.getPacienteBusqueda(Long.parseLong(this.txtfDni.getText()));
        llenarTabla(p);
    }//GEN-LAST:event_btnBuscarDniActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarDni;
    private javax.swing.JButton btnEliminarPaciente;
    private javax.swing.JButton btnModificarPaciente;
    private javax.swing.JButton btnNuevoPaciente;
    private javax.swing.JButton btnVerHC;
    private javax.swing.JComboBox cmbFiltroBuscar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblstaticApellido;
    private javax.swing.JLabel lblstaticDni;
    private javax.swing.JLabel lblstaticNombre;
    private javax.swing.JLabel lblstaticTablaPac;
    private javax.swing.JPanel pnlBuscar;
    private javax.swing.JPanel pnlPacientes;
    private javax.swing.JTable tblPacientes;
    private javax.swing.JTextField txtfApellido;
    private javax.swing.JTextField txtfDni;
    private javax.swing.JTextField txtfNombre;
    // End of variables declaration//GEN-END:variables

    private void setearIniciales() {
        this.txtfDni.setEditable(false);
        this.btnBuscarDni.setEnabled(false);
    }

    private void cambiarTama√±oTabla(DefaultTableModel dtm,int j) {
        dtm.setNumRows(j);
    }

    private void llenarTabla(LinkedList<Paciente> listaPacientes) {
        Object[] o;
        dtmPacientes = (DefaultTableModel) this.tblPacientes.getModel();
        borrarFilas(dtmPacientes);
        LinkedList<Paciente> lista = listaPacientes;
        if(lista.size() == 0)  
            cambiarTama√±oTabla(dtmPacientes,15);
        else
            cambiarTama√±oTabla(dtmPacientes,0);
        
        for (int i = 0; i < lista.size(); i++) {
            o = new Object[3];
            o[0] = lista.get(i).getApellido();
            o[1] = lista.get(i).getNombre();
            o[2] = lista.get(i).getFechaNacimiento();
            dtmPacientes.addRow(o);
        }
            tblPacientes.changeSelection(0, 0, false, false);
    }
    
     private void llenarTabla(Paciente p) {
        Object[] o;
        dtmPacientes = (DefaultTableModel) this.tblPacientes.getModel();
        borrarFilas(dtmPacientes);
        if(p == null)
        {
            MensajesValidaciones.mostrarError(this,"Paciente no encontrado. Por favor corrobore que el DNI sea correcto he intente nuevamente");
            cambiarTama√±oTabla(dtmPacientes,15);
            return;
        }
        cambiarTama√±oTabla(dtmPacientes,1);

            o = new Object[3];
            o[0] = p.getApellido();
            o[1] = p.getNombre();
            o[2] = p.getFechaNacimiento();
            dtmPacientes.addRow(o);
            
            tblPacientes.changeSelection(0, 0, false, false);
    }

    private void borrarFilas(DefaultTableModel dtmPacientes) {
        int j = dtmPacientes.getRowCount();
        for (int i = 0; i < dtmPacientes.getRowCount();) {
            dtmPacientes.removeRow(0);
        }
    }
}
