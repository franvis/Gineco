/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import ClasesBase.ManejoArchivos;
import ClasesBase.MensajesValidaciones;
import ClasesBase.Paciente;
import DAO.DAOPaciente;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Fran
 */
public class Principal extends javax.swing.JFrame {
    
    private ABMPacienteCompleto pacienteInterfaz;
    private HistoriaClinica HC;
    private DefaultTableModel dtmPacientes;
    private DAOPaciente daoPaciente;
    private LinkedList<Paciente> listaPacientes;
    private Paciente p;
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        setearIniciales();
        listaPacientes = new LinkedList<>();
        daoPaciente = new DAOPaciente();
        dtmPacientes = (DefaultTableModel) this.tblPacientes.getModel();
        cambiarTamañoTabla(dtmPacientes,15);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            /*
             * Set the Nimbus look and feel
             */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /*
             * If Nimbus (introduced in Java SE 6) is not available, stay with the
             * default look and feel. For details see
             * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
             */
            
                        javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
               
                
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBuscar = new javax.swing.JPanel();
        txtfApellido = new javax.swing.JTextField();
        lblstaticApellido = new javax.swing.JLabel();
        lblstaticDni = new javax.swing.JLabel();
        txtfDni = new javax.swing.JTextField();
        txtfNombre = new javax.swing.JTextField();
        lblstaticNombre = new javax.swing.JLabel();
        pnlBotones = new javax.swing.JPanel();
        lblBackUp = new javax.swing.JLabel();
        lblNuevoPaciente = new javax.swing.JLabel();
        lblVerHC = new javax.swing.JLabel();
        lblModificarPaciente = new javax.swing.JLabel();
        pnlTablaPacientes = new javax.swing.JPanel();
        scrollPaneTablaPacientes = new javax.swing.JScrollPane();
        tblPacientes = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuNuevoPaciente = new javax.swing.JMenuItem();
        menuModificarPaciente = new javax.swing.JMenuItem();
        menuVerHC = new javax.swing.JMenuItem();
        menuRealizarBackUp = new javax.swing.JMenuItem();
        menuSalir = new javax.swing.JMenuItem();
        menuAcercaDe = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestión de Pacientes");
        setBounds(new java.awt.Rectangle(5, 5, 0, 0));
        setIconImage(getIconImage());
        setLocationByPlatform(true);
        setName("principal"); // NOI18N
        setResizable(false);

        pnlBuscar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)), "Buscar por"));
        pnlBuscar.setToolTipText("");

        txtfApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtfApellidoKeyTyped(evt);
            }
        });

        lblstaticApellido.setText("Apellido:");

        lblstaticDni.setText("Nro. Doc.:");

        txtfDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtfDniKeyTyped(evt);
            }
        });

        txtfNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtfNombreKeyTyped(evt);
            }
        });

        lblstaticNombre.setText("Nombre:");

        javax.swing.GroupLayout pnlBuscarLayout = new javax.swing.GroupLayout(pnlBuscar);
        pnlBuscar.setLayout(pnlBuscarLayout);
        pnlBuscarLayout.setHorizontalGroup(
            pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblstaticApellido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblstaticNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblstaticDni)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtfDni, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBuscarLayout.setVerticalGroup(
            pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarLayout.createSequentialGroup()
                .addGroup(pnlBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblstaticApellido)
                    .addComponent(lblstaticNombre)
                    .addComponent(lblstaticDni))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pnlBotones.setBackground(new java.awt.Color(245, 245, 245));
        pnlBotones.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        pnlBotones.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlBotones.setOpaque(false);

        lblBackUp.setBackground(new java.awt.Color(255, 255, 255));
        lblBackUp.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblBackUp.setForeground(new java.awt.Color(0, 51, 102));
        lblBackUp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBackUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/backup_enabled.png"))); // NOI18N
        lblBackUp.setText("Realizar Back Up");
        lblBackUp.setToolTipText("");
        lblBackUp.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblBackUp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblBackUp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblBackUp.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/backup_not_enabled.png"))); // NOI18N
        lblBackUp.setEnabled(false);
        lblBackUp.setFocusTraversalPolicyProvider(true);
        lblBackUp.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblBackUp.setIconTextGap(0);
        lblBackUp.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lblBackUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBackUpMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblBackUpMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblBackUpMouseExited(evt);
            }
        });

        lblNuevoPaciente.setBackground(new java.awt.Color(255, 255, 255));
        lblNuevoPaciente.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblNuevoPaciente.setForeground(new java.awt.Color(0, 51, 102));
        lblNuevoPaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNuevoPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add_user_enabled.png"))); // NOI18N
        lblNuevoPaciente.setText("Nuevo Paciente");
        lblNuevoPaciente.setToolTipText("");
        lblNuevoPaciente.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblNuevoPaciente.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblNuevoPaciente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblNuevoPaciente.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add_user_not_enabled.png"))); // NOI18N
        lblNuevoPaciente.setEnabled(false);
        lblNuevoPaciente.setFocusTraversalPolicyProvider(true);
        lblNuevoPaciente.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblNuevoPaciente.setIconTextGap(0);
        lblNuevoPaciente.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lblNuevoPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblNuevoPacienteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblNuevoPacienteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblNuevoPacienteMouseExited(evt);
            }
        });

        lblVerHC.setBackground(new java.awt.Color(255, 255, 255));
        lblVerHC.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblVerHC.setForeground(new java.awt.Color(0, 51, 102));
        lblVerHC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVerHC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/HC_enabled.png"))); // NOI18N
        lblVerHC.setText("Ver Historia Clínica");
        lblVerHC.setToolTipText("");
        lblVerHC.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblVerHC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblVerHC.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblVerHC.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/HC_not_enabled_1.png"))); // NOI18N
        lblVerHC.setEnabled(false);
        lblVerHC.setFocusTraversalPolicyProvider(true);
        lblVerHC.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblVerHC.setIconTextGap(0);
        lblVerHC.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lblVerHC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblVerHCMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblVerHCMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblVerHCMouseExited(evt);
            }
        });

        lblModificarPaciente.setBackground(new java.awt.Color(255, 255, 255));
        lblModificarPaciente.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblModificarPaciente.setForeground(new java.awt.Color(0, 51, 102));
        lblModificarPaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblModificarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/edit_profile_enabled.png"))); // NOI18N
        lblModificarPaciente.setText("Modificar Paciente");
        lblModificarPaciente.setToolTipText("");
        lblModificarPaciente.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblModificarPaciente.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblModificarPaciente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblModificarPaciente.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/edit_profile_not_enabled.png"))); // NOI18N
        lblModificarPaciente.setEnabled(false);
        lblModificarPaciente.setFocusTraversalPolicyProvider(true);
        lblModificarPaciente.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblModificarPaciente.setIconTextGap(0);
        lblModificarPaciente.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lblModificarPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblModificarPacienteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblModificarPacienteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblModificarPacienteMouseExited(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblBackUp, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
            .addComponent(lblNuevoPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
            .addComponent(lblVerHC, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
            .addComponent(lblModificarPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addComponent(lblNuevoPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblVerHC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblModificarPaciente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblBackUp))
        );

        pnlTablaPacientes.setBorder(javax.swing.BorderFactory.createTitledBorder("Tabla de Pacientes"));

        tblPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", ""},
                {"", null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "Fecha de Nacimiento", "Fecha de Última Consulta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPaneTablaPacientes.setViewportView(tblPacientes);

        javax.swing.GroupLayout pnlTablaPacientesLayout = new javax.swing.GroupLayout(pnlTablaPacientes);
        pnlTablaPacientes.setLayout(pnlTablaPacientesLayout);
        pnlTablaPacientesLayout.setHorizontalGroup(
            pnlTablaPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTablaPacientesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneTablaPacientes, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTablaPacientesLayout.setVerticalGroup(
            pnlTablaPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTablaPacientesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneTablaPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuArchivo.setText("Archivo");

        menuNuevoPaciente.setText("Nuevo Paciente");
        menuArchivo.add(menuNuevoPaciente);

        menuModificarPaciente.setText("Modificar Paciente");
        menuArchivo.add(menuModificarPaciente);

        menuVerHC.setText("Ver Historia Clínica");
        menuArchivo.add(menuVerHC);

        menuRealizarBackUp.setText("Realizar Back Up");
        menuArchivo.add(menuRealizarBackUp);

        menuSalir.setText("Salir");
        menuArchivo.add(menuSalir);

        menuBar.add(menuArchivo);

        menuAcercaDe.setText("Acerca De...");
        menuBar.add(menuAcercaDe);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlTablaPacientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlTablaPacientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtfApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfApellidoKeyTyped
        if(MensajesValidaciones.negarNumerosBool(evt,this))
            return;
        String apellido = "";
        int i = this.txtfApellido.getText().length();
        if(evt.getKeyChar() == KeyEvent.VK_BACK_SPACE || evt.getKeyChar() == KeyEvent.VK_DELETE){
            if(i > 1)
                apellido = this.txtfApellido.getText().substring(0, this.txtfApellido.getText().length() - 1);
            else if(i == 1)
                apellido = this.txtfApellido.getText();
            else if(i == 0)
                apellido = "";   
        }
        else
            apellido = this.txtfApellido.getText()+evt.getKeyChar();
        
        listaPacientes = new LinkedList<>();
        String nombre = this.txtfNombre.getText();
        String dni = this.txtfDni.getText();
        
        listaPacientes = daoPaciente.getAllPacientes(nombre, apellido, dni);
        
        llenarTabla(listaPacientes);
    }//GEN-LAST:event_txtfApellidoKeyTyped

    private void txtfNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfNombreKeyTyped
        if(MensajesValidaciones.negarNumerosBool(evt,this))
            return;
        String nombre = "";
        int i = this.txtfNombre.getText().length(); 
        if(evt.getKeyChar() == KeyEvent.VK_BACK_SPACE || evt.getKeyChar() == KeyEvent.VK_DELETE){
            if(i > 1 )
                nombre = this.txtfNombre.getText().substring(0, this.txtfNombre.getText().length() - 1);
            else if(i == 1)
                nombre = this.txtfNombre.getText();
            else if(i == 0)
                {
                nombre = "";
                }     
        }
        else
        nombre = this.txtfNombre.getText()+evt.getKeyChar();
        
        String apellido = this.txtfApellido.getText();
        String dni = this.txtfDni.getText();
        
        listaPacientes = new LinkedList<>();
        
        listaPacientes = daoPaciente.getAllPacientes(nombre, apellido, dni);
        
        llenarTabla(listaPacientes);
    }//GEN-LAST:event_txtfNombreKeyTyped

    private void txtfDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfDniKeyTyped
        if(MensajesValidaciones.negarLetrasBool(evt,this))
            return;
        String dni = "";
        int i = this.txtfDni.getText().length(); 
        if(evt.getKeyChar() == KeyEvent.VK_BACK_SPACE || evt.getKeyChar() == KeyEvent.VK_DELETE){
            if(i > 1 )
                dni = this.txtfDni.getText().substring(0, this.txtfDni.getText().length() - 1);
            else if(i == 1)
                dni = this.txtfDni.getText();
            else if(i == 0)
                {
                dni = "";
                }     
        }
        else
        dni = this.txtfDni.getText()+evt.getKeyChar();
        
        String nombre = this.txtfNombre.getText();
        String apellido = this.txtfApellido.getText();
        
        listaPacientes = new LinkedList<>();
        
        listaPacientes = daoPaciente.getAllPacientes(nombre, apellido, dni);
        
        llenarTabla(listaPacientes);
    }//GEN-LAST:event_txtfDniKeyTyped

    private void lblBackUpMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackUpMouseEntered
        this.setearLabels(lblBackUp, true);
    }//GEN-LAST:event_lblBackUpMouseEntered

    private void lblBackUpMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackUpMouseExited
        this.setearLabels(lblBackUp, false);
    }//GEN-LAST:event_lblBackUpMouseExited

    private void lblNuevoPacienteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNuevoPacienteMouseEntered
        this.setearLabels(lblNuevoPaciente, true);
    }//GEN-LAST:event_lblNuevoPacienteMouseEntered

    private void lblNuevoPacienteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNuevoPacienteMouseExited
        this.setearLabels(lblNuevoPaciente, false);
    }//GEN-LAST:event_lblNuevoPacienteMouseExited

    private void lblNuevoPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNuevoPacienteMouseClicked
        pacienteInterfaz = new ABMPacienteCompleto(this,true,0);
        pacienteInterfaz.setVisible(true);
        borrarFilas(dtmPacientes);
        this.txtfApellido.setText("");
        this.txtfNombre.setText("");
        this.txtfDni.setText("");
        dtmPacientes.setNumRows(15);
    }//GEN-LAST:event_lblNuevoPacienteMouseClicked

    private void lblModificarPacienteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModificarPacienteMouseEntered
        this.setearLabels(lblModificarPaciente, true);
    }//GEN-LAST:event_lblModificarPacienteMouseEntered

    private void lblModificarPacienteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModificarPacienteMouseExited
        this.setearLabels(lblModificarPaciente, false);
    }//GEN-LAST:event_lblModificarPacienteMouseExited

    private void lblModificarPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModificarPacienteMouseClicked
        if(!listaPacientes.isEmpty()){
            p = new Paciente();
            dtmPacientes = (DefaultTableModel) this.tblPacientes.getModel();
            p = listaPacientes.get(tblPacientes.getSelectedRow());
            p = daoPaciente.getPacienteCompleto(p.getDni());

            pacienteInterfaz = new ABMPacienteCompleto(this, true, 1, p);
            pacienteInterfaz.setVisible(true);
            borrarFilas(dtmPacientes);
            this.txtfApellido.setText("");
            this.txtfNombre.setText("");
            this.txtfDni.setText("");
            dtmPacientes.setNumRows(15);
        }
    }//GEN-LAST:event_lblModificarPacienteMouseClicked

    private void lblVerHCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblVerHCMouseClicked
        if(!listaPacientes.isEmpty()){
            p = new Paciente();
            p = listaPacientes.get(tblPacientes.getSelectedRow());
            p = daoPaciente.getPaciente(p.getDni());

            HC = new HistoriaClinica(p);
            this.setVisible(false);
            HC.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_lblVerHCMouseClicked

    private void lblVerHCMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblVerHCMouseEntered
        this.setearLabels(lblVerHC, true);
    }//GEN-LAST:event_lblVerHCMouseEntered

    private void lblVerHCMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblVerHCMouseExited
        this.setearLabels(lblVerHC, false);
    }//GEN-LAST:event_lblVerHCMouseExited

    private void lblBackUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackUpMouseClicked
        JFileChooser jfd = new JFileChooser();
        jfd.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfd.setDialogTitle("Elija un directorio destino para el archivo de back up...");
        int r = jfd.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION){
        ManejoArchivos.copiar(this, jfd.getSelectedFile());     
        }
    }//GEN-LAST:event_lblBackUpMouseClicked

    private void setearLabels(JLabel jlbl, boolean entrada){
    if(!listaPacientes.isEmpty() || (jlbl == lblNuevoPaciente || jlbl == lblBackUp)){
        if (entrada) {
            jlbl.setEnabled(true);
            jlbl.setFont(new java.awt.Font("Tahoma", 1, 15));
            jlbl.setForeground(new java.awt.Color(0, 51, 102));
        }
        else {
            jlbl.setEnabled(false);
            jlbl.setFont(new java.awt.Font("Tahoma", 1, 14));
            jlbl.setForeground(new java.awt.Color(0, 0, 0));
        }
    }
}
    
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("Imagenes/sistema.png"));
        return retValue;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblBackUp;
    private javax.swing.JLabel lblModificarPaciente;
    private javax.swing.JLabel lblNuevoPaciente;
    private javax.swing.JLabel lblVerHC;
    private javax.swing.JLabel lblstaticApellido;
    private javax.swing.JLabel lblstaticDni;
    private javax.swing.JLabel lblstaticNombre;
    private javax.swing.JMenu menuAcercaDe;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuModificarPaciente;
    private javax.swing.JMenuItem menuNuevoPaciente;
    private javax.swing.JMenuItem menuRealizarBackUp;
    private javax.swing.JMenuItem menuSalir;
    private javax.swing.JMenuItem menuVerHC;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlBuscar;
    private javax.swing.JPanel pnlTablaPacientes;
    private javax.swing.JScrollPane scrollPaneTablaPacientes;
    private javax.swing.JTable tblPacientes;
    private javax.swing.JTextField txtfApellido;
    private javax.swing.JTextField txtfDni;
    private javax.swing.JTextField txtfNombre;
    // End of variables declaration//GEN-END:variables

    private void setearIniciales() {
        this.txtfDni.setEditable(true);
    }

    private void cambiarTamañoTabla(DefaultTableModel dtm,int j) {
        dtm.setNumRows(j);
    }

    private void llenarTabla(LinkedList<Paciente> listaPacientes) {
        Object[] o;
        dtmPacientes = (DefaultTableModel) this.tblPacientes.getModel();
        borrarFilas(dtmPacientes);
        LinkedList<Paciente> lista = listaPacientes;
        if(lista.size() == 0)  
            cambiarTamañoTabla(dtmPacientes,15);
        else
            cambiarTamañoTabla(dtmPacientes,0);
        
        for (int i = 0; i < lista.size(); i++) {
            o = new Object[3];
            o[0] = lista.get(i).getApellido();
            o[1] = lista.get(i).getNombre();
            o[2] = lista.get(i).getFechaNacimiento();
            dtmPacientes.addRow(o);
        }
            tblPacientes.changeSelection(0, 0, false, false);
    }
    
     private void llenarTabla(Paciente p) {
        Object[] o;
        dtmPacientes = (DefaultTableModel) this.tblPacientes.getModel();
        borrarFilas(dtmPacientes);
        if(p == null)
        {
            MensajesValidaciones.mostrarError(this,"Paciente no encontrado. Por favor corrobore que el DNI sea correcto he intente nuevamente");
            cambiarTamañoTabla(dtmPacientes,15);
            return;
        }
        cambiarTamañoTabla(dtmPacientes,1);

            o = new Object[3];
            o[0] = p.getApellido();
            o[1] = p.getNombre();
            o[2] = p.getFechaNacimiento();
            dtmPacientes.addRow(o);
            
            tblPacientes.changeSelection(0, 0, false, false);
    }

    private void borrarFilas(DefaultTableModel dtmPacientes) {
        int j = dtmPacientes.getRowCount();
        for (int i = 0; i < dtmPacientes.getRowCount();) {
            dtmPacientes.removeRow(0);
        }
    }
    
}
